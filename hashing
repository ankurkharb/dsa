#include <iostream>
using namespace std;
class node{
public:
    int data;
    node *next;
};
class Hashtable
{
public:
    node **HT;
    Hashtable();
    void sortedinsert(int key);
    int hash(int key);
    int search(int key);
};
Hashtable::Hashtable()
{
    HT=new node *[10];
    for(int i=0;i<10;i++)
        HT[i]=nullptr;
}

int Hashtable::hash(int key)
{
    return key%10;
}

void Hashtable::sortedinsert(int key)
{
    int hashindex= hash(key);
    node *t;
    t=new node;
    t->data=key;
    t->next=nullptr;
    if(HT[hashindex]== nullptr)
        HT[hashindex]=t;
    else
    {
        node *p=HT[hashindex];
        node *q=HT[hashindex];
        while(p && p->data<key)
        {
            q=p;
            p=p->next;
        }
        if(q==HT[hashindex])
        {
            t->next=HT[hashindex];
            HT[hashindex]=t;
        }
        else
        {
            t->next=q->next;
            q->next=t;
        }
    }
}

int Hashtable::search(int key)
{
    int hashindex= hash(key);
    node *p;
    p=HT[hashindex];
    while(p)
    {
        if(p->data==key)
            return p->data;
        else
            p=p->next;
    }
    return -1;
}
int main() {
    int A[] = {16, 12, 25, 39, 6, 122, 5, 68, 75};
    int n = sizeof(A)/sizeof(A[0]);
    Hashtable H;
    for (int i=0; i<n; i++)
        H.sortedinsert(A[i]);


    cout << "Successful Search" << endl;
    int key = 6;
    int value = H.search(key);
    cout << "Key: " << key << ", Value: " << value << endl;
    cout << "Unsuccessful Search" << endl;
    key = 95;
    value = H.search(key);
    cout << "Key: " << key << ", Value: " << value << endl;

    return 0;
}
