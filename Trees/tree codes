#include <iostream>
using namespace std;
struct node
{
    node *lchild;
    int data;
    int height;
    node *rchild;
}*root=NULL;
void insert(int key)
{
    struct node *p=root;
    node *t,*r=NULL;
    if(root==NULL)
    {
        t=new node;
        t->data=key;
        t->rchild=t->lchild=NULL;
        root=t;
        return;
    }
    while(p!=NULL)
    {
        r=p;
        if(key<p->data)
            p=p->lchild;
        else if(key>p->data)
            p=p->rchild;
        else
            return;
    }
    t=new node;
    t->data=key;
    t->rchild=t->lchild=NULL;
    if(key<r->data)
        r->lchild=t;
    else if(key>r->data) {
        r->rchild = t;
    }
}
int nodeheight(node *p)
{
    int hl,hr;
    hl=p &&p->lchild?p->lchild->height:0;
    hr=p &&p->rchild?p->rchild->height:0;
    return hl>hr?hl+1:hr+1;
}
node * rinsert(node *p,int key)
{
    struct node *t=NULL;
    if(p==NULL)
    {
        t=new node;
        t->data=key;
        t->rchild=t->lchild=NULL;
        t->height=1;
        return t;
    }
    if(key<p->data)
    {
        p->lchild= rinsert(p->lchild,key);
    }
    else if(key > p->data)
    {
        p->rchild= rinsert(p->rchild,key);
    }
    p->height= nodeheight(p);
    return p;
}
void inorder(node *p)
{
    while(p!=NULL) {
        inorder(p->lchild);
        cout << p->data<<" ";
        inorder(p->rchild);
    }
}
void preorder(node *p) {
    if (p) {
        cout << p->data<<"  "<<endl;
        preorder(p->lchild);
        preorder(p->rchild);
    }
}
node* search(node *p,int key)
{
    while(p!=NULL) {
        if (key == p->data) {
            return p;
        } else if (key < p->data) {
            p = p->lchild;
        } else {
            p = p->rchild;
        }
    }
    return NULL;
}


int main()
{
    root=rinsert(root,10);
    rinsert(root,20);
    rinsert(root,5);
    preorder(root);
    //node * temp;
//    temp= search(root,2);
  //  if(temp!=NULL) {
    //    cout <<"Element "<<temp->data<<" found "<<endl;
    //{
    //else cout<<"Element not found "<<endl;
}
