using namespace std;
class node
{
public:
    int data;
    node *lchild;
    node *rchild;
};


class Queue
{
private:
    int rear ;
    int front;
    int size;
    node* *Q;
public:
    Queue()
    {
        front=rear=-1;
        size=10;
        Q=new node*[size];
    }
    Queue(int size)
    {
        front =rear =-1;
        this->size=size;
        Q=new node*[this->size];
    }
    void Enqueue(node *x);
    node* Dequeue();
    void display();
    int isempty()
    {
        return rear==front;
    }
};
void Queue::Enqueue(node *x)
{
    if(rear==size-1)
        cout<<"Queue is full "<<endl;
    else
    {
        rear++;
        Q[rear]=x;
    }
}
node* Queue::Dequeue()
{
    node *x=NULL;
    if(front==rear)
        cout<<"Queue is Empty "<<endl;
    else {
        x=Q[front+1];
        front ++;

    }
    return x;
}











#include"Queue.h"
#include<iostream>
using namespace std;

class Tree
{
public:
    node *root;
    Tree(){root=NULL;}
    void preorder(node *p);
    void postorder(node *p);
    void inorder(node *p);
    void levelorder(node *root);
    void createtree()
    {
        node *p,*t;
        int x;
        Queue q(100);
        cout<<"Enter root value "<<endl;
        cin>>x;
        root=new node;
        root->data=x;
        root->rchild=root->lchild=NULL;
        q.Enqueue(root);
        while(!q.isempty())
        {
            p=q.Dequeue();
            if(p== nullptr)
                break;
            cout<<"Enter left child of  "<<p->data;
            cin>>x;
            if(x!=-1) {
                t = new node;
                t->data = x;
                t->lchild = t->rchild = NULL;
                p->lchild = t;
                q.Enqueue(t);
            }
            cout<<"Enter rigth child  "<<p->data<<endl;
            cin>>x;
            if(x!=-1)
            {
                t=new node;
                t->data=x;
                t->rchild=t->lchild=NULL;
                p->rchild=t;
                q.Enqueue(t);
            }
        }
    }
};
void Tree::preorder(node *p)
{
    if(p)
    {
        cout<<p->data;
        preorder(p->lchild);
        preorder(p->rchild);
    }
}
void Tree::inorder(node *p)
{
    preorder(p->lchild);
    p->data;
    preorder(p->rchild);
}

void Tree::postorder(node *p)
{
    inorder(p->lchild);
    inorder(p->rchild);
    p->data;

}
void Tree::levelorder(node *root)
{
    Queue qu(100);
    cout<<root->data;
    qu.Enqueue(root);
    while(!qu.isempty())
    {
        root=qu.Dequeue();
        if(root->lchild)
        {
            cout<<root->lchild->data;
            qu.Enqueue(root->lchild);
        }
        if(root->rchild)
        {
            cout<<root->rchild->data;
            qu.Enqueue(root->rchild);
        }
    }

}
int main()
{
    Tree t;
    t.createtree();
    t.levelorder(t.root);
}
